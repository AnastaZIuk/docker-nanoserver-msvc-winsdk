name: NanoServer MSVC

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  run-nanoserver-msvc-winsdk-x64-build:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Restore Image Cache
        uses: actions/cache/restore@v4
        id: restore-buildkit
        with:
          path: |
            buildkit
            
          key: buildkit-${{ runner.os }}-
          restore-keys: |
            buildkit-${{ runner.os }}-

      - name: Setup buildkit
        shell: pwsh
        run: |
            if (-Not (Test-Path "buildkit")) {
                Write-Host "üìÇ 'buildkit' directory not found. Downloading and extracting daemons..."
                
                Invoke-WebRequest -Uri "https://github.com/moby/buildkit/releases/download/v0.20.1/buildkit-v0.20.1.windows-amd64.tar.gz" -OutFile "buildkit.tar.gz"
                tar -xf buildkit.tar.gz -C buildkit
                
                Invoke-WebRequest -Uri "https://github.com/containerd/containerd/releases/download/v2.0.4/containerd-2.0.4-windows-amd64.tar.gz" -OutFile "containerd.tar.gz"
                tar -xf containerd.tar.gz -C buildkit
            } else {
                Write-Host "‚úÖ 'buildkit' directory already exists. Skipping download."
            }

            .\cni\setup-nat.ps1

            New-Item -ItemType Directory -Path "buildkit/logs" -Force
            $Bin = "${{ github.workspace }}\buildkit\bin"
            echo "PATH=$Bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Run daemons
        shell: pwsh
        run: |    
            function Wait-For {
                param (
                    [string]$Command,          
                    [int]$TickWait = 1,    
                    [int]$TotalTicks = 5 
                )
          
                Write-Host "‚è≥ Waiting for command.. (Max retries: $TotalTicks, Interval: ${TickWait}s)"
                
                for ($i=1; $i -le $TotalTicks; $i++) {
                    Write-Host "‚è≥ [$i/$TotalTicks]: $Command"
                    if (Invoke-Expression $Command) {
                        Write-Host "‚úÖ Success!"
                        return $true
                    }
                    Start-Sleep -Seconds $TickWait
                }
          
                Write-Error "‚ùå Timeout: $Command did not succeed!"
                exit 1
            }

            $logs = "buildkit/logs"
            $cni = "${{ github.workspace }}\buildkit\cni"

            Start-Job -ScriptBlock {
                param($logs)
                Start-Process containerd.exe `
                  -RedirectStandardOutput "$logs/containerd.log" `
                  -RedirectStandardError "$logs/containerd_error.log" `
                  -NoNewWindow -PassThru
            } -ArgumentList $logs

            Wait-For "ctr --namespace buildkit image ls"

            Start-Job -ScriptBlock {
                param($logs, $cni)
                Start-Process buildkitd.exe `
                  -ArgumentList @("--containerd-cni-config-path=$cni\0-containerd-nat.conf",
                                  "--containerd-cni-binary-dir=$cni") `
                  -RedirectStandardOutput "$logs/buildkitd.log" `
                  -RedirectStandardError "$logs/buildkitd_error.log" `
                  -NoNewWindow -PassThru
            } -ArgumentList $logs, $cni

            Wait-For "buildctl du"

      - name: Build base image
        shell: cmd
        run: |
            buildctl build --frontend=dockerfile.v0 --local context=. --local dockerfile=. ^
              --output type=image,name=nano/base,push=false ^
              --export-cache type=local,dest=buildkit/.cache,mode=max ^
              --import-cache type=local,src=buildkit/.cache ^
              --opt target=buildtools

      - uses: fawazahmed0/action-debug-vscode@main

      #- name: Build app image
      #  shell: cmd
      #  run: |
      #      buildctl build --frontend=dockerfile.v0 --local context=. --local dockerfile=. ^            
      #        --output type=image,name=nano/app,push=false ^
      #        --export-cache type=local,dest=buildkit/.cache,mode=max ^
      #        --import-cache type=local,src=buildkit/.cache ^
      #        --opt target=nano
            
      - name: Save Image Cache
        id: cache-buildkit
        uses: actions/cache/save@v4
        with:
          path: |
            buildkit
          key: buildkit-${{ runner.os }}-
