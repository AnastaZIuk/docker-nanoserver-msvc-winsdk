name: NanoServer MSVC

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  run-nanoserver-msvc-winsdk-x64-build:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Cached WSL Kernel & VHDX
        uses: actions/cache@v4
        id: wsl_cache
        with:
          path: |
            linux/bzImage
            linux/ext4.vhdx
            linux/wsl.msi
          key: wsl-files-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            wsl-files-${{ runner.os }}-

      - name: Configure WSL environment
        shell: pwsh
        run: |
          if (!(Test-Path "linux")) { New-Item -ItemType Directory -Path "linux" | Out-Null }

          $bzImageCached = Test-Path "linux/bzImage"
          $ext4Cached = Test-Path "linux/ext4.vhdx"
          $wslCached = Test-Path "linux/wsl.msi"

          if (-not $wslCached) {
            Write-Host "linux/wsl.msi not found in cache, downloading..."
            Invoke-WebRequest -Uri "https://github.com/microsoft/WSL/releases/download/2.4.12/wsl.2.4.12.0.x64.msi" -OutFile "linux/wsl.msi"
          } else {
            Write-Host "linux/wsl.msi found in cache, skipping download."
          }

          Write-Host "Updating WSL..."
          Start-Process -Wait "msiexec.exe" -ArgumentList "/i ${{ github.workspace }}\linux\wsl.msi /qn /norestart" -NoNewWindow -PassThru
          wsl --set-default-version 2

          Write-Host "Updating .wslconfig..."
          $wslConfigPath = "$env:USERPROFILE\.wslconfig"
          $kernelPath = ("${{ github.workspace }}\linux\bzImage").Replace("\", "\\")

          $wslConfigContent = @"
          [wsl2]
          kernel=$kernelPath
          "@

          $wslConfigContent | Set-Content -Path $wslConfigPath -Encoding UTF8 -Force

          Write-Host "==== .wslconfig CONTENT ====" -ForegroundColor Green
          Write-Host $wslConfigContent -ForegroundColor Green
          
          if (-not $bzImageCached) {
            Write-Host "linux/bzImage not found in cache, downloading..."
            Invoke-WebRequest -Uri "https://github.com/Devsh-Graphics-Programming/WSL2-Linux-Kernel/releases/download/wsl2-kernel-13885376672/bzImage" -OutFile "linux/bzImage"
          } else {
            Write-Host "linux/bzImage found in cache, skipping download."
          }

          if (-not $ext4Cached) {
            Write-Host "linux/ext4.vhdx not found in cache, creating Alpine instance with docker registry..."
            Invoke-WebRequest -Uri "https://github.com/yuk7/AlpineWSL/releases/download/3.21.3-0/Alpine.zip" -OutFile "Alpine.zip"
            Expand-Archive -Path "Alpine.zip" -DestinationPath "linux" -Force
            Write-Output "`n" | & .\linux\Alpine.exe
            wsl -s Alpine
            wsl apk add docker
            wsl nohup dockerd > /dockerd-log 2>&1 &
            ./wsl/wait-for-daemon.ps1
            wsl docker pull registry:2.8.3
          } else {
            Write-Host "ext4.vhdx found in cache, skipping download & importing linux\ext4.vhdx!"
            wsl --import-in-place Alpine ${{ github.workspace }}\linux\ext4.vhdx
            wsl -s Alpine
          }

          Write-Host "==== LINUX WSL DIRECTORY STRUCTURE ====" -ForegroundColor Cyan
          Get-ChildItem -Path "linux" -Recurse | ForEach-Object { $_.FullName.Replace($PWD.Path, "").Replace("\", "/") }

      - name: Save WSL Kernel & VHDX to Cache
        uses: actions/cache@v4
        with:
          path: |
            linux/bzImage
            linux/ext4.vhdx
            linux/wsl.msi
          key: wsl-files-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            wsl-files-${{ runner.os }}-

      - uses: fawazahmed0/action-debug-vscode@main
